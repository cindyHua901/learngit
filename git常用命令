git 常用命令
-----------------------
提交文件到暂存库
git add .

提交到git仓库
git commit "commit"

查看当前工作空间的状态
git status

查看修改了什么 
git diff <filename>

查看历史记录
git log命令显示从最近到最远的提交日志，我们可以看到3次提交
git log
git log --pretty=oneline 

滚到某一个版本
git reset --hard <版本号的前几位>

查看历史命令
git reflog
-----------------------------------------------------
版本库有工作区 版本库（暂存区 head指的版本）
工作区-->add -->版本库(暂存区) --> commit -->版本库（head指向的版本）
----------------------------------------------------
管理修改   git跟踪并管理的是修改 而不是文件

查看工作区与版本库里最新版本的区别
git diff HEAD -- <filename>

-----------------------------------
撤销修改
撤销工作区的修改：
git checkout -- <filename>
撤销暂存区的修改 HEAD表示版本库里的最新版本
git reset HEAD <filename>
撤销提交到版本库的修改
git reset --hard  HEAD^^

-----------------------------------
删除文件
git rm <filename>
git commit
误删的，可以从版本库里找  一键还原
git checkout -- <filename>
----------------------------------

远程仓库
生成 ssh key
ssh-keygen -t rsa -C "youremail@example.com"
关联远程仓库(origin) 
git remote add origin <远程仓库地址>
把本地仓库的内容推送到远程仓库
git push -u origin master 

把当前master分支推送到远程
git push origin master

从远程仓库克隆
 git clone <远程仓库地址>

------------------------------
分支管理  使用分支完成某个任务，合并后再删掉分支
HEAD指向的是当前分支！！！
查看当前有哪些分支 并且在哪个分支上*
git branch  
创建分支并切换到分支
git checkout -b <分支名>

相当于
git branch <分支名>
git checkout <分支名>

合并分支
将指定分支合并到当前分支
git merge <分支名>

删除分支
git branch -d <分支名>

--------------------------------------
解决冲突

Switched to branch 'master'
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
提示当前master分支比远程的master分支要超前两个


vvvv

制造冲突 


ffffff 有冲突吗》》》


ddddddddddddddddddddddd
我是一个冲突！！！

合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
--no-ff参数，表示禁用Fast forward

------------------------------------------------
BUG分支
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

git stash 锁住现在的工作空间
git stash apply 恢复工作空间
git stash drop 删除 stash内容
git stash pop 恢复的同时也把stash内容删了
git stash list 查看stash的东西。。。

---------------------------------------------
cherry-pick命令，让我们能复制一个特定的提交到当前分支

等等 我先去修改bug
---------------------------------------------
多人协作
推送分支
master主分支与 dev开发分支都需要与远程同步
git push origin master
git push origin dev
bug分支用于修改bug 不用推送到远程
feature分支 （开发新的功能）

抓取分支
git clone git地址
这个时候只看得到默认分支master
要在dev分支上开发就需要创建远程origin 的dev分支到本地
git checkout -b dev origin/dev
推送到远程仓库
git push origin dev
--------------------------------------------------------
推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突
解决办法：
先用git pull把最新的提交从origin/dev抓下来，
然后，在本地合并，解决冲突，再推送

------------------------------------------------------
首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！














